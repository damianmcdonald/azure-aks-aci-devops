# https://kubernetes.io/docs/reference/kubectl/cheatsheet/
# https://medium.com/faun/kubectl-commands-cheatsheet-43ce8f13adfb

# show kubectl config
kubectl config view

# get info on deployments
kubectl get all

# get info on pods
kubectl get pods

# get info on services
kubectl get services

# get info on PV and PVC
kubectl get pv
kubectl get pvc

# describe a pod
kubectl describe pod <POD_NAME>

# get pod logs
kubectl logs <POD_NAME>

# get cluster info
kubectl cluster-info
kubectl cluster-info dump

# see node resource usage
kubectl top nodes
kubectl top node <POD_NAME>

# execute a process in a pod
kubectl exec -it <POD_NAME>  -- ls /

# install container with helm chart
helm upgrade --install gitlab stable/gitlab-ce --wait --timeout 600s --set externalUrl=http://gitlab.entornodevops.info

# uninstall helm chart
helm uninstall gitlab

# install a container with a kubernetes manifest
kubectl create -f "$PWD/kubernetes/tomcat"

kubectl delete service tomcat
kubectl delete deployment tomcat


#######################################################
Demo commands
#######################################################

#Deploy a pod in a Deployment
kubectl run hello-world --image=gcr.io/google-samples/hello-app:1.0

#Let's follow our pod and deployment status
#Deployments are made of ReplicaSets!
kubectl get deployment hello-world
kubectl get replicaset
kubectl get pods

#Expose the Deployment as a Serivce.
#This will create a Service for the ReplicaSet behind the Deployment
#We are exposing our serivce on port 80, connecting to an application running on 8080 in our pod.
#Port: Interal Cluster Port, the Service's port. You will point cluster resources here.
#TargetPort: The Pod's Serivce Port, your application. That one we defined when we started the pods.
kubectl expose deployment hello-world --port=80 --target-port=8080

#Check out the IP: and Port:, that's where we'll access this service.
kubectl get service hello-world

# Edit the service to assign a public IP address
kubectl edit service hello-world
# Asign a public IP Address
type: LoadBalancer

#Access the service inside the cluster
curl http://SERVICEIP:PORT

#We can edit the resources "on the fly" with kubectl edit. But this isn't reflected in our yaml. But is
#persisted in the etcd database...cluster store. Change 1 to 3.
kubectl edit deployment hello-world

#Get a list of the pods running
kubectl get pods

#Access the application again, try it several times, app will load balance.
curl http://SERVICEIP:PORT

kubectl delete service hello-world
kubectl delete deployment hello-world
kubectl get all
